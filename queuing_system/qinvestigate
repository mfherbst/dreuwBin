#!/bin/bash

# Script to investigate PBS jobs
# Copyright (C) 2015 Michael F. Herbst
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in the 
# file LICENCE or at <http://www.gnu.org/licenses/>.

# load library:
. $(dirname $0)/../shared.config.lib.sh || exit 1
. $(dirname $0)/../shared.tabcomplete.lib.sh || exit 1
. $(dirname $0)/../shared.helpstrings.lib.sh || exit 1

##########################################################################
#Settings
DEVELOPER="Michael F. Herbst <info@michael-herbst.com>" #main developer of this script
WARNINGWAIT=2 #number of seconds to wait if a warning is issued

#########################################################################
#-- checks and setup --#
########################

cleanup_before_exit() {
	# function to be called in a trap before 
	# exiting the script

	#remove ssh key in case we added it
	[ "$ADDED_SSH_KEY" ] && ssh-add -d
}

preliminary_checks() {
	#function to be called to set up the environment

	# check host
	if [[ "$HOSTNAME" != "$MASTERHOSTNAME" ]]; then
		echo "Sorry wrong host, please use host $MASTERHOSTNAME to run this."
		exit 1
	fi
}

user_has_ssh_key() {
	#determine if the user has an ssh key

	# here we assume the keys are at the default location
	# ie.
	local KEYLOC="$HOME/.ssh/"
	for key in $KEYLOC/id_{rsa,dsa,ecdsa,ed25519}; do
		[ -r "$key" ] && return 0
	done
	return 1
}

setup_ssh_keys() {
	# function that checks for an ssh-agent
	# and adds the users ssh key

	# check if user has an ssh agent
	if ! ps x -U $USER | grep -q "[s]sh-agent"; then
		cat <<- EOF
		WARNING: No running ssh-agent found
		Currently there is no ssh-agent running for your user on this host.
		This implies that you will have to type your password each time this
		script needs to login to one of the nodes.
		For some commands this can be quite tedious, so the use of an
		ssh-agent is highly recommended.
		You can disable this message by setting ADDSSHKEY=n in the
		configuration file.

		EOF
		sleep $WARNINGWAIT
		return 1
	fi

	# check for keys in ssh-add that is added
	ssh-add -l &> /dev/null && return 0

	# see if user has key to add
	if ! user_has_ssh_key; then
		cat <<- EOF
		WARNING: No ssh public key found
		Currently there is no ssh public key found in your HOME/.ssh folder
		Please generate a key using "ssh-keygen" or (if your key is not
		at the default location) add it manually to the agent.
		You can disable this message by setting ADDSSHKEY=n in the
		configuration file.

		If you have no clue what this means, most probably the first thing
		is the case and I suggest you read the manpage of ssh-keygen ;)

		EOF
		sleep $WARNINGWAIT
		return 1
	fi

	# add user key
	echo Please enter your password to add the ssh key to your agent:
	if ssh-add; then
		trap cleanup_before_exit EXIT
		return 0
	else
		echo WARNING: could not add ssh key
		sleep $WARNINGWAIT
		echo
		return 1
	fi
}

script_usage() {
	# help to print if script is called with -h or --help

	cat <<- EOF
	$(basename $0) [<Options>] [ [ -- ] <qinvestigate command> [ <args> ] ]

	Toolkit to investigate and modify PBS jobs efficiently.
	For a list of implemented commands start the script and type "help" or
	run "$(basename $0) --no-add-sshkey help".

	All arguments after the -- or that are left after the options are parsed
	are interpreted as internal qinvestigate commands and their arguments.

	Available <Options>:
	   --add-sshkey        enable or disable the check for a running ssh-agent
	   --no-add-sshkey     available keys and the automatic querying for a
	                       password to add the key to your agent.

	Features of the shell:
	The shell has basic tab completion and tries to match jobs according
	to both JOB ID and JOB name whereever a command requires an <ID> or
	a <list>.

	The script makes use of the environment variable \$USER to filter out
	the relevant lists for the current user.

	Bugs / Suggestions / Feature Requests:
	      $DEVELOPER
EOF


}

#########################################################################
#-- config management --#
#########################

default_config() {
	# spits out the default configuration

	cat <<- EOF
	# The syntax of all options is
	# <OPTIONNAME> = "<OPTIONVALUE>"
	# Both spaces around the = as well as the " around the
	# <OPTIONVALUE> are optional.
	#
	# <OPTIONVALUE> may not continue any of the three characters
	#  " = '

	main {
		# The hostname on which the PBS system runs:
		MASTERHOSTNAME="$MASTERHOSTNAME"

		# Should the script check for a running ssh agent
		# and if the users ssh key is added
		# valid values: "y" or "n"
		ADDSSHKEY="$ADDSSHKEY"

		# Absolute number of hours of remaining walltime below which
		# job is considered to be running out of walltime very soon.
		WALLTIME_WARNING_ABS=$WALLTIME_WARNING_ABS

		# Relative percentage of remaining walltime below which
		# job is considered to be running out of walltime very soon.
		WALLTIME_WARNING_REL=$WALLTIME_WARNING_REL

		# Should the delete command confirm its action
		# before sending the qdel to the master
		# valid values: "y" or "n"
		DELETE_CONFIRMATION=$DELETE_CONFIRMATION
	}

	aliases {
		# Type in this block the aliases for the qinvestigate shell
		# The syntax is (similar to bash):
		#   alias <SHORT FORM>="<LONG FORM>"
		# for example consider
		#   alias l="login"
		# which binds l as an alias for login
		# The <LONG FORM> may not contain any of the three characters
		# = " '
		#
		# examples:
		#alias q="quit"
		#alias l="login"
	}
	EOF
}

parse_config() {
	#Parse mainblock
	ConfigParseBlock "main" $ALLGLOBALSETTINGS
	case "$?" in
		2)
			echo "main block missing in config file `ConfigPath`" >&2
			echo "Please add at least an empty block \"main {}\"" >&2
			exit 1
			;;
		8)
			echo "The main block of `ConfigPath` contained invalid config options." >&2
			exit 1
			;;
		0)
			#All fine
			:
			;;
		*)	#No Config yet present
			#Dump default:
			default_config | ConfigPut
			echo "NOTICE: Default config dumped in file `ConfigPath`"
			sleep $WARNINGWAIT
			parse_config
			return $?
			;;
	esac

	#read and parse alias block
	local ALIASESBLOCK
	if ALIASESBLOCK=`ConfigGetBlock "aliases"`; then
		# parse the alias block into a sequence of commands
		# ALIASES["q"]="quit"
		# ALIASES["l"]="login"
		# ...
		# that will then be evaluated by the shell
		# ignore all entries that are invalid or may cause problems
		# when the shell evals the result
		# (ie those which contain = or ' or " in the string on the RHS of =)
		local ALIASCODE
		if ! ALIASCODE=$(
			echo -n "$ALIASESBLOCK" | awk "
				BEGIN {
					res=0 #return value
				}

				/^alias[[:space:]]+[[:graph:]]+=\\\"[^=\\\"']+\\\"$/ {
					split(\$2,a,\"=\")
					sub(/^\"/,\"\",a[2])
					sub(/\"$/,\"\",a[2])
					print \"ALIASES[\\\"\" a[1] \"\\\"]='\" a[2] \"'\"
					next
				}

				{
					print \"Invalid alias definition: \" \$0  > \"/dev/stderr\"
					res=1
					next
				}

				END {
					exit res
				}
			"
		); then
			echo "WARNING: Some entries of the alias block in `ConfigPath` were ignored." >&2
			sleep $WARNINGWAIT
		fi
		eval "$ALIASCODE"
	fi
}

#########################################################################
#-- command cache --#
#####################

list_commands_aliases() {
	#list all commands and aliases
	list_commands
	echo -n " "
	echo -n "${!ALIASES[@]}"
}

list_commands() {
	#list all commands
	list_commands_none
	echo -n " "
	list_commands_id
	echo -n " "
	list_commands_list
	echo -n " "
	list_commands_node
	echo -n " "
	list_commands_nodelist
}

list_commands_none() {
	#get list of commands that require no argument
	fill_list_commands_cache
	echo -n "$COMMANDS_NONE"
}

list_commands_id() {
	#get list of commands that require a single job id
	fill_list_commands_cache
	echo -n "$COMMANDS_ID"
}

list_commands_list() {
	#get list of commands that require a list of job ids
	fill_list_commands_cache
	echo -n "$COMMANDS_LIST"
}

list_commands_node() {
	#get list of commands that require a list of job ids
	fill_list_commands_cache
	echo -n "$COMMANDS_NODE"
}

list_commands_nodelist() {
	#get list of commands that require a list of job ids
	fill_list_commands_cache
	echo -n "$COMMANDS_NODELIST"
}

max_command_length(){
	#get maximum number of characters a command has
	fill_list_commands_cache
	echo -n "$MAX_COMMAND_LENGTH"
}

fill_list_commands_cache() {
	#fill cache for the lists of available commands
	[ "$COMMANDS_NONE" ] && return
	COMMANDS_NONE=$(declare -f | sed -ne '/^c_.* ()/s/^c_\([[:graph:]]*\)_none ().*/\1/p' | tr '\n' ' ')
	COMMANDS_ID=$(declare -f | sed -ne '/^c_.* ()/s/^c_\([[:graph:]]*\)_id ().*/\1/p' | tr '\n' ' ')
	COMMANDS_LIST=$(declare -f | sed -ne '/^c_.* ()/s/^c_\([[:graph:]]*\)_list ().*/\1/p' | tr '\n' ' ')
	COMMANDS_NODE=$(declare -f | sed -ne '/^c_.* ()/s/^c_\([[:graph:]]*\)_node ().*/\1/p' | tr '\n' ' ')
	COMMANDS_NODELIST=$(declare -f | sed -ne '/^c_.* ()/s/^c_\([[:graph:]]*\)_nodelist ().*/\1/p' | tr '\n' ' ')

	MAX_COMMAND_LENGTH=`list_commands | tr ' ' '\n' | wc --max-line-length`
}

empty_list_commands_cache() {
	COMMANDS_NONE=
	COMMANDS_ID=
	COMMANDS_LIST=
	COMMANDS_NODE=
	COMMANDS_NODELIST=
	MAX_COMMAND_LENGTH=
}

#########################################################################
#-- printing help --#
#####################

print_help_for_category() {
	case "$1" in
		list)
			EXTRA="<list>"
			;;
		id)
			EXTRA="<id>  "
			;;
		none)
			EXTRA="      "
			;;
		nodelist)
			EXTRA="      "
			;;
		node)
			EXTRA="<id>  "
			;;
		*)
			echo "Cannot print help for unknown category $1"
			return 1
	esac

	#The amount of witespace we need for the lines (for multiline help) to be aligned:
	WHITE=$(printf "%$(( $(max_command_length) + 12 ))s" "")
	for cmd in `list_commands_$category`; do
		#width of the extra column (for alignment of first help line)
		local COLWIDTH=$(( $(max_command_length) + 6 - ${#cmd} ))
		printf "   \033[0;33m%s\033[0;00m %-${COLWIDTH}s  " "$cmd" "$EXTRA"

		print_help_for_command "c_${cmd}_${category}" | sed "2,\$s/^/$WHITE/g"
	done
}

#########################################################################
#-- utils --#
#############

match_for_jobs() {
	# Tries to match the argument on $1 against the list of JobIDs 
	# and the list of jobnames of this user. 
	# Echos all matching jobids in the list form "jobid1 jobid2 jobid3"
	# If one or more IDs match returns 0, else 1

	[ -z "$1" ] && return 1
	qstat  -1 -n -u $USER | awk -v "pattern=$1" -v "user=$USER" '
		BEGIN {ret=1}
		$2 == user && ($1 ~ pattern || $4 ~ pattern) { printf "%s ", $1; ret=0 }
		END {print ""; exit ret}
	'
}

print_jobs() {
	#$@: a list of job ids
	qstat -u $USER $@
}

node_for_jobid() {
	# Expects a single jobid and echos the corresponding node.
	# returns 1 on any error, 0 on success.

	[ -z "$1" ] && return 1
	qstat  -1 -n "$1" | awk -v "user=$USER" -v "id=$1" '
		$2 == user {
			if ($10 != "R") {
				print("Cannot determine node for jobid " id ": Job is not yet running") > "/dev/stderr"	
				exit 1
			}

			#get rid of /procnumber:
			gsub(/\/[0-9]+/,"",$12);

			#split at the +
			split($12,a,"+")

			#check if all the same node
			node=a[1];
			for (ind in a) {
				if (a[ind] != node) {
					print("Found multiple nodes for jobid " id) > "/dev/stderr"
					exit 1
				}
			}
			print node
			exit 0
		}
	'
}

parse_job_args() {
	# parses all job args on $@ and echos a list of all matching job ids
	# in the form "jobid1 jobid2 jobid3"
	# If one or more IDs match returns 0, else 1

	local LIST=""
	while [ "$1" ]; do
		LIST="$LIST $(match_for_jobs $1)"
		shift
	done
	LIST=$(echo "$LIST" | sed 's/[[:space:]]+/ /g;s/^ //;s/ $//g')
	if [ -z "$LIST" ]; then
		return 1
	fi
	echo "$LIST"
	return 0
}

amend_qstat() {
	# amend qstat output by adding an estimated start/endtime
	# in an extra column and by removing the user column

	#TODO remove username column

	awk '
		function getstart(job) {
			#note this function implicitly sets $0, $1, $2 to ""
			cmd="showstart " job
			while ( (cmd | getline) ) {
				if (match($0,"start")) {
					sub("^.* on ","")
					close(cmd)
					return $0
				}
			}
			close(cmd)
			return "-- unknown job --"
		}

		function getend(job) {
			#note this function implicitly sets $0, $1, $2 to ""
			cmd="showstart " job
			while ( (cmd | getline) ) {
				if (match($0,"completion")) {
					sub("^.* on ","")
					close(cmd)
					return $0
				}
			}
			close(cmd)
			return "-- unknown job --"
		}

		#the column header, first line
		$1 ~ "^Req" && $2 ~ "^Req" && $3 == "Elap" { printf "%s  %s\n", $0, "        Estimated"; next }
		#the column header, second line
		/^Job ID/ { printf "%s  %s\n", $0, "   Start / Completion"; next }

		#the -- to mark the column
		/^-----------/ { printf "%s  %s\n", $0, "-------------------"; next}
		
		#running or queuing job
		/^[0-9]/ && $10 == "Q" {line = $0; printf "%s  %s\n",line,getstart($1); next}
		/^[0-9]/ && $10 == "R" {line = $0; printf "%s  %s\n",line,getend($1); next}
		
		#all other lines:
		{ print }'
}

get_accessible_nodes () {
	qnodes | awk '
		BEGIN {curnode="";}

		curnode != "" && /^[[:space:]]*$/ {curnode="";next}
		/^[[:graph:]]+$/ { curnode=$0; next }

		curnode != "" && $1 == "state" && $3 != "offline" { print curnode; curnode=""; next }
	'
}

#########################################################################
#-- shell --#
#############

shell_loop() {
	local RET=0

	#if only one job, than select it here, else empty
	LASTJOBID=`qstat -u $USER | awk -v "user=$USER" '
		BEGIN { ret=0 }
		$2 == user { 
			if (id != "") { ret=1; exit }; 
			id=$1
	      	}
		END { 
			if (ret==0) {
				print id; 
				exit 0
			}
			exit 1
		}
		'
	`

	echo "Welcome to the interactive PBS queue diagnosis tool."
	echo
	c_summary_none
	echo
	echo "Enter 'help' for a list of implemented commands or 'quit' to quit the shell"

	while true; do
		if [ $RET != 0 ]; then
			echo -e "rc: \033[0;32m$RET\033[0;00m"
		fi

		# tab completion with function tabcomplete_first_word from tabcomplete lib
		TAB_FIRST_WORDS=( $(list_commands_aliases) )
		bind -x '"\t":"tabcomplete_first_word"';
		#TODO implement completion for arguments

		read -e -p "($(printf "%6s" "$LASTJOBID")) >" LINE
		
		if [ "$LINE" ]; then
			history -s "$LINE"
			run_command $LINE
			RET=$?
		fi
	done
}

substitute_alias() {
	#$1: command to expand
	#$2: nesting count
	#echos the expanded command on stdout, errors on stderr
	
	local NEST=${2:-0}
	local CMD=$1
	if ((NEST > 10)); then
		echo "substitute_alias reached nest count of 10" >&2
		echo "Executing command as is: $CMD" >&2
		echo "$CMD"
		return
	fi

	local ALIASES_INDICES=${!ALIASES[@]}
	case "$CMD" in
		#the @( ) and ?( ) patterns require extglob !!
		@(${ALIASES_INDICES// /|}))
			substitute_alias "${ALIASES[$CMD]}" "$((NEST+1))"
			return
			;;
		*)	echo "$CMD"
			return 
			;;
	esac
}

run_command() {
	# interpret and run a command
	# returns the return code of the function executed
	# reads and alters the global variable LASTJOBID via __rc_echo_joblist
	# $1: command
	# $2 to $n: arguments

	local CMD="$1"
	local LIST
	shift

	[ -z "$CMD" ] && return 0
	
	#fill command if neccessary:
	[ -z "$COMMANDS_NONE" ] && fill_list_commands_cache

	#substitute aliases:
	CMD=$(substitute_alias "$CMD")

	#categorise the command and interpret (in case it is a _none)
	local CMD_CATEGORY="none"
	case "$CMD" in
		#the @( ) and ?( ) patterns require extglob !!
		@(${COMMANDS_NONE// /|})?(+([[:space:]])*))
			c_${CMD}_none
			return $?
			;;
		@(${COMMANDS_ID// /|})?(+([[:space:]])*))
			CMD_CATEGORY="id"
			;;
		@(${COMMANDS_NODE// /|})?(+([[:space:]])*))
			CMD_CATEGORY="node"
			;;
		@(${COMMANDS_LIST// /|})?(+([[:space:]])*))
			CMD_CATEGORY="list"
			;;
		@(${COMMANDS_NODELIST// /|})?(+([[:space:]])*))
			c_${CMD}_nodelist $(get_accessible_nodes)
			return $?
			;;
		*)
			 echo "Unrecognised command: $CMD" >&2
			 echo "Type help for a list of commands" >&2
			 return 1
			 ;;
	esac
	
	#all categories need the list of job ids:
	if ! LIST=$(parse_job_args $@); then
		if [ "$LASTJOBID" ]; then
			LIST=$LASTJOBID
		else
			echo "No argument provided or no job matched" >&2
			return 1
		fi
	fi

	#if more than one match and category is not list, then tell user and exit
	if [ $(echo "$LIST" | wc -w) == 1 ]; then
		#in any case we will proceed => update LASTJOBID
		LASTJOBID="$LIST"
	elif [ "$CMD_CATEGORY" == "list" ]; then
		#here we proceed with multiple job ids
		LASTJOBID=""
	else
		#for all categories but list we need (but do not have) a unique ID
		echo "More than one job matched the pattern:" >&2
		print_jobs "$LIST" > /dev/stderr
		return 1
	fi

	#parse node and run
	local NODE
	if [ "$CMD_CATEGORY" == "node" ]; then
		if ! NODE=$(node_for_jobid "$LIST");then
			echo "Error finding node for jobid: $LIST" >&2
			return 1
		fi
		#run node command:
		c_${CMD}_node "$NODE" "$LIST"
		return $?
	fi

	#run all remaining commands:
	c_${CMD}_${CMD_CATEGORY} "$LIST"
	return $?
}

#########################################################################
#-- awk snippets --#
####################
AWK_TOSEC='
	function tosec(str) {
		#convert a string of the kind 00:00:00 to number of seconds

		if (str == "--") return 0
		n = split(str,ar,":")
		if (n==3) {
		       return 60*60*ar[1]+60*ar[2]+ar[3]
		}
		print "Cannot interpret time: " str > "/dev/stderr"
		return 0
	}
'


#########################################################################
#-- commands --#
################
#Note: - functions for commands start with a "c_", followed by the
#        commands name and a suffix for the kind of arguments the
#        command requires:
#            - "_none" for no argument
#            - "_id"   for a single job id
#            - "_list" for a list of job ids.
#            - "_node" for the node as the first arg
#                      and the job id as the second argument
#            - "_nodelist" A list of all active and available nodes
#                      as the passed arguments
#      - they should contain a line with a help string starting with
#        "help_string" that documents the commands action shortly

c_quit_none() {
	help_string "Quit shell."
	exit 0
}

c_help_none() {
	help_string "print this help"

	echo "The following commands are implemented:"
	for category in none nodelist id node list; do
		print_help_for_category $category
	done

	cat <<- EOF

	In the above list
	   <id> is a job id or jobname (or a pattern to match these fields)
	   <list> is a list of job ids or a list of jobnames or a pattern
	If a pattern gives rise to more than one matching entry, than
	it is only valid for a command expecting a <list>

	Bugs / Suggestions / Feature Requests:
	      $DEVELOPER
	EOF
}

c_alias_none() {
	help_string "List defined aliases"
	local ALIASES_INDICES=${!ALIASES[@]}
	for ind in $ALIASES_INDICES; do
		echo "alias $ind=\"${ALIASES[$ind]}\""
	done
}

c_joblist_none() {
	help_string "print all jobs owned by you."
	qstat -nu $USER | amend_qstat
}

c_summary_none() {
	help_string "print a short summary including
	- jobs running out of walltime
	- recently submitted jobs
	- summary of load on the cluster
	- your fairshare stats"

	# cache:
	local QUSER="$(qstat -u $USER | amend_qstat)"
	local NUM="$(echo -n "$QUSER" | grep -c "$USER")"
	if [[ $NUM == 0 ]]; then
		echo -e "You currently have \033[0;33mno jobs\033[0;00m."
	elif [[ $NUM -lt $SUMMARY_MAXJOBS ]]; then
		echo -e "\033[0;33mAll\033[0;00m your current jobs:"
		echo "$QUSER"
	else
		echo -e "$SUMMARY_MAXJOBS \033[0;33mmost recently submitted\033[0;00m jobs (run \"joblist\" for all):"
		echo "$QUSER" | awk 'BEGIN {pr=1}; pr==1 ; /^--------/ {pr==0; exit}'
		echo "$QUSER" | grep "$USER" | sort -r | head -n $SUMMARY_MAXJOBS
	fi
	echo "$QUSER" | awk -v "user=$USER" -v "abs=$WALLTIME_WARNING_ABS" -v "rel=$WALLTIME_WARNING_REL" "
		$AWK_TOSEC

		BEGIN {
			printed=0
		}

		function printonce() {
			if (printed==1) return
			print \"\"
			printf \"Jobs running \\033[0;31mout of walltime\\033[0;00m very soon:\n\"
			printed=1
		}

		\$2 == user && (tosec(\$9)-tosec(\$11)) < abs*60*60 { printonce(); print; next}
		\$2 == user && (tosec(\$9)-tosec(\$11)) < (rel*tosec(\$11)/100) { printonce(); print; next}
	"

	echo
	qnodes | awk '
		BEGIN {curnode="";}

		curnode != "" && /^[[:space:]]*$/ {curnode="";next}
		/^[[:graph:]]+$/ { curnode=$0; next }

		curnode != "" && $1 == "state" && ( $3 == "offline" || $3 == "down" ) { curnode=""; next }
	       	curnode != "" && $1 == "np" { nodetotcpus[curnode]=$3; nodes[++nodecount]=curnode }
		curnode != "" && $1 == "properties" { nodeprops[curnode]= $3}
		curnode != "" && $1 == "jobs" { nodeavailcpus[curnode]= (nodetotcpus[curnode]-split($3,a,",")) }
		curnode != "" && $1 == "status" {
			avail=0  #available memory in kb
			tot=0	#total memory in kb

			#shift first two fields away:
			for (i=1; i <= NF; ++i) {
				$i=$(i+2)
			}

			split($0,a,",")
			for (ind in a) {
				if (pos=match(a[ind],/^availmem=/)) {
					avail=substr(a[ind],pos+9)
					sub(/kb$/,"",avail)
				}
				if (pos=match(a[ind],/^totmem=/)) {
					tot=substr(a[ind],pos+7)
					sub(/kb$/,"",tot)
				}
			}
			nodeavailmem[curnode]=avail
			nodetotmem[curnode]=tot
		}

		END {
			maxlen=0 #max number of chars for the hostname
			for (i=1; i<=nodecount; ++i) {
				if (length(nodes[i]) > maxlen) {
					maxlen=length(nodes[i])
				}
			}

			printf "%-" maxlen "s  %8s   %19s   %s\n", "Node", "availCPU", "%TOT (avail mem) MiB", "properties"
			printf "%-" maxlen "s  %8s   %19s   %s\n", "----", "--------", "--------------------", "----------"
			for (i=1; i<=nodecount; ++i) {
				if (nodeavailcpus[nodes[i]] == "") {
					#if no jobs on node we set nodeavailcpus to total number of cpus
					nodeavailcpus[nodes[i]]=nodetotcpus[nodes[i]]
				}

				colbef=""
				colaft=""
				if (nodeavailcpus[nodes[i]] > 0) {
					colbef="\033[0;32m"
					colaft="\033[0;00m"
				}

				percentmemory="00"
				if (nodetotmem[nodes[i]] > 0) {
					percentmemory = nodeavailmem[nodes[i]]/nodetotmem[nodes[i]]*100
				}
				printf "%-" maxlen "s  " colbef "%8s" colaft "  %6.2f%% %13i   %s\n", \
					nodes[i], nodeavailcpus[nodes[i]] "/" nodetotcpus[nodes[i]], \
					percentmemory, nodeavailmem[nodes[i]]/1024, nodeprops[nodes[i]]
			}
		}
		'

	echo
	echo "Fairshare place:"
	diagnose -f | awk -v "user=$USER" '
		BEGIN { pr=0 }
		pr > 0 && /^$/ { exit }
		pr==1 && /^-------------$/ { pr=2; next };
		pr == 0 && /^USER$/ { pr=1; next }
		pr == 2 { arr[$1]=$2; }
		pr == 2 && $0 ~ "^" user "\\*? " { userline=$0 ; user=$1; next }
		END {
			n = asort(arr,sorted)
			i=1
			for(;i <=n;++i) { if(sorted[i] == arr[user]) break; }

			place=n-i+1
			string="th"
			if (place%10 == 1) string="st"
			if (place%10 == 2) string="nd"

			#split userline into fields
			n = split(userline,ulfields);

			#print heading:
			printf "%-26s%8s%8s","FSInterval","%","Target"
			for (i=4;i<=n; ++i) {
				printf "%8s", (i-4)
			}
			printf "\n"

			#print content:
			printf "%-20s%-6s", ulfields[1], "(" place string	")"
			for (i=2; i<=n; ++i) {
				printf "%8s", ulfields[i]
			}
			printf "\n"
		}
	'
}

#c_stats_id() {
#	help_string "display some job statistics"
#       ???
#
#	echo $FUNCNAME called with args $@
#	#TODO
#}

c_login_node() {
	help_string "login to the job's node and set the working directory
	to be the job's TMPDIR (ie the location under /lscratch
	Make sure to configure the .ssh/config that a simple ssh node is enough."
	local NODE="$1"
	local ID="$2"
	ssh -t "$NODE" "cd /lscratch/; cd $USER; cd *_$ID; bash -il"
}

c_scratch_node() {
	help_string "login to the nodes scratch folder /scratch/$USER"
	local NODE="$1"
	local ID="$2"
	ssh -t "$NODE" "cd /scratch/; cd $USER; cd *_$ID; bash -il"
}

c_top_node() {
	help_string "login to the job's node and call top"
	local NODE="$1"
	local ID="$2"
	ssh -t $NODE "top"
}

c_delete_list() {
	help_string "Delete one or more jobs"

	local LIST="$1"
	local RES
	for ID in $LIST; do
		if [ "$DELETE_CONFIRMATION" == "n" ]; then
			RES="y"
		else
			read -p "Really delete job $ID (y/N)?  " RES
		fi
		if [ "$RES" == "y" ]; then
			qdel $ID
		fi
	done
}

#c_load_list() {
#	help_string "check load and memory usage"
#	#check the load and memory usage for this list of jobs
#	# (to see if one might be swapping)
#	echo $FUNCNAME called with args $@
#}

#TODO command qstat that does pattern matching on supplied arg and shows matching entries of the queue

c_diskspace_nodelist() {
	help_string "Print the space you occupy in /scratch and /lscratch on each node"

	for node in $@; do
		ssh $node "
			DIRS=
			[ -d /scratch/$USER ] && DIRS=\"\$DIRS /scratch/$USER\"
			[ -d /lscratch/$USER ] && DIRS=\"\$DIRS /lscratch/$USER\"
			[ -z \"\$DIRS\" ] && exit
			echo -n \"\$HOSTNAME  \"
			du -sh \$DIRS | sed 's/^/   /g; s/\t/  /g' | tr '\\n' ' '
			echo"
	done
}

c_cleanup_nodelist() {
	help_string "Interactively clean up scratch files located in /lscratch and
	/scratch on each node"

	"$(dirname $0)/cleanup_scratch.py" $@
}

#########################################################################
#-- Start of script --#
#######################

MASTERHOSTNAME="ccserv1"
ADDSSHKEY=y
WALLTIME_WARNING_ABS=5  #hours
WALLTIME_WARNING_REL=10 #%
SUMMARY_MAXJOBS=10 #list max 10 jobs in summary
DELETE_CONFIRMATION=y

# should contain all variables that the main block
# of the config file can overwrite
# read by parse_config
ALLGLOBALSETTINGS="MASTERHOSTNAME ADDSSHKEY WALLTIME_WARNING_ABS WALLTIME_WARNING_REL SUMMARY_MAXJOBS DELETE_CONFIRMATION"
declare -r ALLGLOBALSETTINGS

# associative bash array for the aliases
# indexed value is the aliased shortcut and 
# the value is the long form the alias expands to
declare -A ALIASES

# shortcut if user just wants help:
if [[ "$1" == "help" ]]; then
	run_command  "help"
	exit $?
elif [[ "$1" == "-h" || "$1" == "--help" ]];then
	script_usage
	exit 0
fi

# parse the config and do preliminary checks
parse_config
preliminary_checks

while [ "$1" ]; do
	case "$1" in
		-h|--help)
			script_usage
			exit 0
			;;
		--add-sshkey)
			ADDSSHKEY=y
			;;
		--no-add-sshkey)
			ADDSSHKEY=n
			;;
		--)
			shift
			break
			;;
		-*)
			echo "Unrecognised commandline argument: $1" >&2
			echo "Run $(basename $0) -h for help." >&2
			exit 1
			;;
		*)
			break
			;;
	esac
	shift
done

#setup ssh keys
[ "$ADDSSHKEY" == "y" ] && setup_ssh_keys

if [ "$1" ]; then
	# There is stuff left on the commandline
	# => presumably the user does not want to run a shell
	#    but execute the command directly
	run_command $@
	exit $?
fi

shell_loop
